{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["operations","generateGrid","Array","fill","App","useState","grid","setGrid","running","setRunning","speed","setSpeed","isPressed","setIsPressed","runningRef","useRef","current","speedRef","runSimulation","useCallback","produce","gridCopy","x","y","neighbors","forEach","i","j","newX","newY","setTimeout","style","display","gridTemplate","placeItems","className","fontSize","margin","gridTemplateColumns","map","rows","col","key","onClick","newGrid","onMouseEnter","height","width","backgroundColor","undefined","border","type","list","value","min","max","step","onChange","event","console","log","target","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3eba6f38.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 30;\nconst numCols = 40;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateGrid = () => {\n  const grid = Array(numRows).fill(Array(numCols).fill(0));\n  return grid;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(generateGrid());\n  const [running, setRunning] = useState(false);\n  const [speed, setSpeed] = useState(550);\n  const [isPressed, setIsPressed] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const speedRef = useRef(speed);\n  speedRef.current = speed;\n\n  const isPressedRef = useRef(isPressed);\n  isPressedRef.current = isPressed;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((grid) => {\n      return produce(grid, (gridCopy) => {\n        for (let x = 0; x < numRows; x++) {\n          for (let y = 0; y < numCols; y++) {\n            let neighbors = 0;\n            operations.forEach(([i, j]) => {\n              const newX = x + i;\n              const newY = y + j;\n              if (newX >= 0 && newX < numRows && newY >= 0 && newY < numCols) {\n                neighbors += grid[newX][newY];\n              }\n            });\n            if (grid[x][y] === 1 && neighbors < 2) {\n              gridCopy[x][y] = 0;\n            } else if (\n              grid[x][y] === 1 &&\n              (neighbors === 2 || neighbors === 3)\n            ) {\n              gridCopy[x][y] = 1;\n            } else if (grid[x][y] === 1 && neighbors > 3) {\n              gridCopy[x][y] = 0;\n            } else if (grid[x][y] === 0 && neighbors === 3) {\n              gridCopy[x][y] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, speedRef.current);\n  }, []);\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplate: \"auto 1fr auto\",\n        placeItems: \"center\",\n      }}\n    >\n      <div\n        className=\"header\"\n        style={{\n          fontSize: \"3rem\",\n        }}\n      >\n        Game of Life\n      </div>\n      <div\n        className=\"board\"\n        style={{\n          margin: \"20px 0 20px 0\",\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, x) =>\n          rows.map((col, y) => (\n            <div\n              key={`${x}-${y}`}\n              onClick={() => {\n                if (!isPressed) {\n                  const newGrid = produce(grid, (gridCopy) => {\n                    gridCopy[x][y] = gridCopy[x][y] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }\n                setIsPressed(!isPressed);\n              }}\n              onMouseEnter={() => {\n                if (isPressed) {\n                  const newGrid = produce(grid, (gridCopy) => {\n                    gridCopy[x][y] = gridCopy[x][y] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }\n              }}\n              style={{\n                height: 20,\n                width: 20,\n                backgroundColor: grid[x][y] ? \"turquoise\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n      <div className=\"controls\">\n        <div className=\"slide-container\">\n          <input\n            type=\"range\"\n            list=\"ticks\"\n            value={speedRef.current}\n            min=\"100\"\n            max=\"1000\"\n            step=\"450\"\n            className=\"slider\"\n            onChange={(event) => {\n              console.log(event.target.value);\n              setSpeed(event.target.value);\n            }}\n          />\n          <datalist id=\"ticks\">\n            <option value=\"100\" />\n            <option value=\"550\" />\n            <option value=\"1000\" />\n          </datalist>\n        </div>\n        <button\n          onClick={() => {\n            setRunning(false);\n            setGrid(generateGrid());\n          }}\n        >\n          Reset\n        </button>\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {running ? \"Stop\" : \"Start\"}\n        </button>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}